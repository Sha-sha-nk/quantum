operation BellTest (count : Int, initial: Result) : (Int,Int)
    {
        body
        {
            mutable numOnes = 0;
            using (qubits = Qubit[2]) //[] tells 2 qubit sytem
            {
                for (test in 1..count)
                {
                    Set (initial, qubits[0]);
                    Set (Zero, qubits[1]); //We've added another Set operation to initialize qubit 1 to make sure that it's always in the Zero state when we start.
					//   H(qubits[0]); using Hadamard gate before measuring by bell test for 1 qubit system ie Qubit[1]
					//   X(qubits[0]); using flip gate before measuring by bell test for 1 qubit system ie Qubit[1]
                    H(qubits[0]);
                    CNOT(qubits[0],qubits[1]);
                    let res = M (qubits[0]);

                    // Count the number of ones we saw:
                    if (res == One)
                    {
                        set numOnes = numOnes + 1;
                    }
                }
                Set(Zero, qubits[0]);
                Set(Zero, qubits[1]); //We also need to reset the second qubit before releasing it (this could also be done with a for loop). We'll add a line after qubit 0 is reset
            }
            // Return number of times we saw a |0> and number of times we saw a |1>
            return (count-numOnes, numOnes);
        }
    }